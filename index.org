#   -*- mode: org; fill-column: 60 -*-
#+STARTUP: showall
#+TITLE: Studyhall | TOC
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/chenla/studyhall/index.org
:Created:   2017-08-20T19:13@Prek Leap (11.642600N-104.919210W)
:ID:        5145ebde-e630-4528-a4f6-c5ca75a24f85
:VER:       556503249.083914379
:GEO:       48P-491193-1287029-15
:BXID:      proj:NDA0-6406
:Class:     deploy
:Entity:    toc
:Status:    wip 
:Licence:   MIT/CC BY-SA 4.0
:END:

* Studyhall | Table of Contents
[[https://img.shields.io/badge/made%20by-Chenla%20Institute-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-deploy-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/entity-TOC-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]



 - [[./sh-intro.org][Introduction]]
 - [[./ch-overview.org][Chalkhall Overview]]
 - [[https://www.farnamstreetblog.com/2012/04/learn-anything-faster-with-the-feynman-technique/][The Feynman Technique: The Best Way to Learn Anything]]

* Curriculum

In a sense we will be teaching things backwards -- start
with building practical skills that can be used on the job,
and then go back and learn underlying theory, math and
details concepts.  This is done for two reasons.  We want
students to become exposed to and start working on real
projects as soon as possible.  We believe the best way to
learn is by doing.  Second, most students in developing
countries do not have the luxury of spending four years in
school before they can begin earning money for their
families.  By providing basic practical skills and then
proactively placing students in P/T internships and jobs
where employers agree to support ongoing studies,
financially and through flexibile hours.

After that is complete, students can then begin specialized
studies in everything from computer graphics, cryptography,
advanced software engineering, machine learning etc.

The degree programs are a subset of a larger superset of
study which is designed to take roughly ten years to
complete, in which students will complete approximately
10,000 hours of deliberate practice after which they will
have become masters in their own right.

Materials are designed for non-native english speakers, and
will develop communication as well as technical skills
needed to learn and function in professional work
environments.

The overall philosophy is that everything reinforces what
came before it.


** Foundation & Practicum (years 1-2)


Foundation Arts: provides the basic intellectual and
communication tools that all learning is based on.  This is
embodied in the Trivium's grammer, logic and rhetoric.  But
we will expand this to include a base tool box of computer
skills as well, which include the shell and core utilities,
regular expressions, the two classical editors (emacs & vim)
and a practical knowledge of two scripting languages, the
unix operating system, and essential programing concepts.
Together these two sets of tools will be used as the
foundation for everything else.

Foundation sciences: basic physics, chemistry



  - Intro Computer Science :: broad introduction to base
       concepts and how things fit together to find out if
       CS is a good fit for students.

  - Core Tools ::  editors, shell, graphics, version
                  control, containers, VMs
  - Core WebStack :: html, httpd, css, javascript, php  & frameworks
  - Intro Systems :: Operating Systems, Neworking & Security
  - Intro Python  :: basic python scripting and virtualenv
  - Intro Ruby    :: basic ruby scripting and virtualenv
  - Intro Statistics :: basic statistics and processing with R
  - Intro Provisioning :: chef, puppet etc -- 

Communication & Logic

  - Written  :: everything from correspondence, essays, reports
                and technical and scientific writing.
  - Reading  :: reading & understanding cultural context
  - [[./sh-rhetoric.org][Oral]] :: spoken communication, presentation and argument
  - Critical Thinking :: logic, learn how to learn, learning
       how to fail.


--------

  - Computing for Science :: ipython, reproducable research

  - professional development -- certificate program for
    working professionals.

** Core Computer Science (years 2-4)

Required courses that correspond roughly to the first three
years of a computer science curriculum.  Courses begin in
the second year of study which overlaps with the second year
of foundation and practicum studies.

Topics: 

Laguages: Haskell, Scheme, Prolog, C, Java, Rust, Golang.

  - Core programing
  - Core math
  - Core systems
  - Core applications

** Advanced Computer Science (year 4) 

Elective couses that correspond to final year of a computer
science curriculum.

Topics:


** Portflio & Final Project
A project for students to validate, consolidate, and display
their knowledge in the form of a literate program, that,
taken together with their engineering notebooks, runbooks
and 

** Specializations

Graduate-level specializations that can be taken after
completing the above curriculum.

** Teaching & Mentorship

The last stage of mastery is to teach.  Students will become
mentors and tutors for students coming up through the
program and work with them on real world projects.  But also
through blogging and other types of publications,
participating in conferences and online forums.

* Toolbox

We will loosely base the circiculm on [[https://github.com/ossu/computer-science][ossu/computer-science]]. 


** Unix & Linux Operating Systems
** Command Line
** Command Line Text Processing
- [[./toolbox-awk.org][AWK]]
** Scripting
** Editors
*** Vi
*** Emacs
** Version Control

** Languages
- SICP
- Python
- Ruby
- Emacs Lisp
- R

** Web Stack
- XML
- HTML
- CSS
- PHP
- Javascript




