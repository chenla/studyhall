#   -*- mode: org; fill-column: 60 -*-
#+STARTUP: showall
#+TITLE: Studyhall | TOC

[[https://img.shields.io/badge/made%20by-Chenla%20Institute-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-deploy-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/entity-TOC-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

* Studyhall | Table of Contents
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/chenla/studyhall/index.org
:Created:   2017-08-20T19:13@Prek Leap (11.642600N-104.919210W)
:ID:        5145ebde-e630-4528-a4f6-c5ca75a24f85
:VER:       556503249.083914379
:GEO:       48P-491193-1287029-15
:BXID:      proj:NDA0-6406
:Class:     deploy
:Entity:    toc
:Status:    wip 
:Licence:   MIT/CC BY-SA 4.0
:END:



 - [[./sh-intro.org][Introduction]]

 - [[./sh-chalkhall-program.org][Chalkhall Program]]

 - [[./ch-overview.org][Chalkhall Overview]]

 - [[https://www.quora.com/Can-the-Feynman-lectures-on-physics-help-me-learn-physics][Can the Feynman lectures on physics help me learn physics?]] | Quora

 - [[./sh-blended-learning.org][Blended Learning]]
 - [[./sh-spaced-repitition.org][Spaced Repitition]]
 - [[./sh-mentoring.org][Mentorship]]
 - [[./sh-notetaking.org][Note Taking]]
 - [[./sh-thesis.org][Thesis]]

 - [[./sh-candidates.org][Candidates]]

* Techniques

Youtube:  [[https://www.youtube.com/playlist?list=PLY33uf2n4e6NALWnVjUZVbXwsJtiFGccI][The science of teaching and learning]] from open.osmosis.org

Learning how to study, how to read and take notes should be
done up front.

 - 30 minute blocks - learn to rest
 - [[https://www.farnamstreetblog.com/2012/04/learn-anything-faster-with-the-feynman-technique/][The Feynman Technique: The Best Way to Learn Anything]]
 - [[https://www.quora.com/How-effective-is-the-Feynman-technique-for-learning][How effective is the Feynman technique for learning?]] | Quora
 - Mind Maps

 - Memory Palace
 - [[https://www.youtube.com/watch?v=BxFKvn5wCrE&index=7&list=PLY33uf2n4e6NALWnVjUZVbXwsJtiFGccI][Memory palaces]] | open.osmosis.org (YouTube)


 - time clocking
 - task management

* Pedagogy

 - Three Pillars of Academia: Teaching, Research, Service
   
   It seems that a split of 40/40/20 is a good balance for
   teaching staff.  I think we need to extend the concept to
   students as well, students will need to study, practice
   and work.  Working 20% doesn't sound like much.... but
   there are only so many hours in a day.

* Curriculum

In a sense we will be teaching things backwards -- start
with building practical skills that can be used on the job,
and then go back and learn underlying theory, math and
details concepts.  This is done for two reasons.  We want
students to become exposed to and start working on real
projects as soon as possible.  We believe the best way to
learn is by doing.  Second, most students in developing
countries do not have the luxury of spending four years in
school before they can begin earning money for their
families.  By providing basic practical skills and then
proactively placing students in P/T internships and jobs
where employers agree to support ongoing studies,
financially and through flexibile hours.

After that is complete, students can then begin specialized
studies in everything from computer graphics, cryptography,
advanced software engineering, machine learning etc.

The degree programs are a subset of a larger superset of
study which is designed to take roughly ten years to
complete, in which students will complete approximately
10,000 hours of deliberate practice after which they will
have become masters in their own right.

Materials are designed for non-native english speakers, and
will develop communication as well as technical skills
needed to learn and function in professional work
environments.

The overall philosophy is that everything reinforces what
came before it, and that each topic is approached at
different levels of difficulty, from multiple POV and LOD.
In this way this becomes an educational platform, not just
one set of text books.

I also want to find a way to create a modular method of
learning on your own and/or in class that pulls everything
into a big picture -- that ties the arts and sciences,
utilitarian and fine arts together..

 - LA/S :: liberal arts & sciences
 - UA/S :: utilitarian arts & sciences
 - FA   :: fine arts

This is not designed /just/ for a degree program, but is
meant to be a living lifetime learning platform, that makes
it possible to learn anything, master it, remember it, and
provide a means of continuing to learn more on each topic
over time.

But for this to work there have to be some basic rules for
the platform -- everything should be designed to:

  - complete in 30 minutes of concentrated effort.
  - must be available in org markup, and html (epub) and web
    page.
  - a 10 minute video that provides an introduction.
  - each lesson is part of a thread(s), and has broader and
    narrower relationships to concepts.
  - include exercises/problems/examples (cookbook)
  - facts and exercises should be incorporated into a spaced
    repitition regime.  but not just flash card SRS, but
    reminders to review notes and material -- every time you
    review material, you get the chance to add to and refine
    your notes.

Drills are different from notes.

After the initial cycle of spaced repitition is complete and
what you learned is now part of long term memory, the 2 year
intervals are a bit more tricky -- your notes are basically
your engineering work notes -- so every time you check them,
it should count as a review and the timer reset for the two
year review.



** Foundation & Practicum (years 1-2)


Foundation Arts: provides the basic intellectual and
communication tools that all learning is based on.  This is
embodied in the Trivium's grammer, logic and rhetoric.  But
we will expand this to include a base tool box of computer
skills as well, which include the shell and core utilities,
regular expressions, the two classical editors (emacs & vim)
and a practical knowledge of two scripting languages, the
unix operating system, and essential programing concepts.
Together these two sets of tools will be used as the
foundation for everything else.

Foundation sciences: basic physics, chemistry



  - Intro Computer Science :: broad introduction to base
       concepts and how things fit together to find out if
       CS is a good fit for students.

  - Core Tools ::  editors, shell, graphics, version
                  control, containers, VMs
  - Core WebStack :: html, httpd, css, javascript, php  & frameworks
  - Intro Systems :: Operating Systems, Neworking & Security
  - Intro Python  :: basic python scripting and virtualenv
  - Intro Ruby    :: basic ruby scripting and virtualenv
  - Intro Statistics :: basic statistics and processing with R
  - Intro Provisioning :: chef, puppet etc -- 

Communication & Logic

  - Written  :: everything from correspondence, essays, reports
                and technical and scientific writing.
  - Reading  :: reading & understanding cultural context
  - [[./sh-rhetoric.org][Oral]] :: spoken communication, presentation and argument
  - Critical Thinking :: logic, learn how to learn, learning
       how to fail.


--------

  - Computing for Science :: ipython, reproducable research

  - professional development -- certificate program for
    working professionals.

** Core Computer Science (years 2-4)

Required courses that correspond roughly to the first three
years of a computer science curriculum.  Courses begin in
the second year of study which overlaps with the second year
of foundation and practicum studies.

Topics: 

Laguages: Haskell, Scheme, Prolog, C, Java, Rust, Golang.

  - Core programing
  - Core math
  - Core systems
  - Core applications

** Advanced Computer Science (year 4) 

Elective couses that correspond to final year of a computer
science curriculum.

Topics:


** Portflio & Final Project
A project for students to validate, consolidate, and display
their knowledge in the form of a literate program, that,
taken together with their engineering notebooks, runbooks
and 

** Specializations

Graduate-level specializations that can be taken after
completing the above curriculum.

** Teaching & Mentorship

The last stage of mastery is to teach.  Students will become
mentors and tutors for students coming up through the
program and work with them on real world projects.  But also
through blogging and other types of publications,
participating in conferences and online forums.

* Toolbox

We will loosely base the circiculm on [[https://github.com/ossu/computer-science][ossu/computer-science]]. 


** Unix & Linux Operating Systems
** Command Line
** Command Line Text Processing
- [[./toolbox-awk.org][AWK]]
- [[./toolbox-tar.org][Tar]]
** Scripting
** Editors
*** Vi
*** Emacs
** Version Control

** Languages
- SICP
- Python
- Ruby
- Emacs Lisp
- R

** Web Stack
- XML
- HTML
- CSS
- PHP
- Javascript




